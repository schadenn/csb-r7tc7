{"version":3,"sources":["styles.js","App.js","index.js"],"names":["baseStyle","flex","display","flexDirection","alignItems","padding","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","color","outline","transition","activeStyle","acceptStyle","rejectStyle","App","images","setImages","useState","showImages","setShowImages","width","setWidth","error","setError","parseData","toParse","data","JSON","parse","console","log","urls","Object","values","brands","map","entry","displayName","icon","url","feature","logo","reduce","acc","curr","onDrop","useCallback","acceptedFiles","reader","FileReader","onabort","onerror","onload","result","_e","forEach","file","readAsText","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","useDropzone","style","useMemo","className","onClick","rows","cols","onChange","ev","target","value","placeholder","type","image","src","rootElement","document","getElementById","ReactDOM","render"],"mappings":"qKAAA,MAAMA,EAAY,CAChBC,KAAM,EACNC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,QAAS,OACTC,YAAa,EACbC,aAAc,EACdC,YAAa,UACbC,YAAa,SACbC,gBAAiB,UACjBC,MAAO,UACPC,QAAS,OACTC,WAAY,2BAGRC,EAAc,CAClBN,YAAa,WAGTO,EAAc,CAClBP,YAAa,WAGTQ,EAAc,CAClBR,YAAa,W,WCpBA,SAASS,IACtB,MAAOC,EAAQC,GAAaC,mBAAS,KAC9BC,EAAYC,GAAiBF,oBAAS,IACtCG,EAAOC,GAAYJ,mBAAS,KAC5BK,EAAOC,GAAYN,oBAAS,GAE7BO,EAAaC,IACjB,MAAM,KAAEC,GAASC,KAAKC,MAAMH,GAC5BI,QAAQC,IAAIJ,GACZ,MAAMK,EAAOC,OAAOC,OAAOP,EAAKQ,QAC7BC,KAAKC,IAAW,IAAD,MACd,MAAO,QACLA,QADK,IACLA,OADK,EACLA,EAAOC,YADF,OAELD,QAFK,IAELA,GAFK,UAELA,EAAOE,YAFF,aAEL,EAAaC,IAFR,OAGLH,QAHK,IAGLA,GAHK,UAGLA,EAAOI,eAHF,aAGL,EAAgBD,IAHX,OAILH,QAJK,IAILA,GAJK,UAILA,EAAOK,YAJF,aAIL,EAAaF,QAGhBG,QAAO,CAACC,EAAKC,IACL,IAAID,EAAK,CAACC,EAAK,GAAIA,EAAK,GAAIA,EAAK,GAAIA,EAAK,MAChD,IACL5B,EAAUe,IAGNc,EAASC,uBAAaC,IAC1B,MAAMC,EAAS,IAAIC,WAEnBD,EAAOE,QAAU,IAAMrB,QAAQC,IAAI,4BACnCkB,EAAOG,QAAU,IAAM5B,GAAS,GAChCyB,EAAOI,OAAS,KAEd,IACE5B,EAAUwB,EAAOK,QACjB,MAAOC,GACP/B,GAAS,KAKbwB,EAAcQ,SAASC,GAASR,EAAOS,WAAWD,OACjD,KACG,aACJE,EADI,cAEJC,EAFI,aAGJC,EAHI,aAIJC,EAJI,aAKJC,GACEC,YAAY,CAAElB,WAEZmB,EAAQC,mBACZ,SACKpE,KACC+D,EAAejD,EAAc,MAC7BkD,EAAejD,EAAc,MAC7BkD,EAAejD,EAAc,MAEnC,CAAC+C,EAAcE,EAAcD,IAG/B,OACE,sBAAKK,UAAU,MAAf,UACG5C,GACC,qCACE,mBAAG0C,MAAO,CAAExD,MAAO,OAAnB,2CACA,wBAAQ2D,QAAS,IAAM5C,GAAS,GAAhC,kBACA,0BAGJ,iDACA,yBAASmC,EAAa,CAAEM,UAAxB,UACE,0BAAWL,MACVC,EACC,sDAEA,sGAKJ,gDACA,0BACEQ,KAAK,KACLC,KAAK,KACLC,SAAWC,IACLA,EAAGC,OAAOC,OAAOjD,EAAU+C,EAAGC,OAAOC,UAG7C,uBACA,uBACEC,YAAY,cACZC,KAAK,OACLL,SAAWC,GAAOlD,EAASkD,EAAGC,OAAOC,SAEvC,wBACEN,QAAS,KACPhD,GAAc,IAFlB,yBAOCD,GACC,kCACE,kCACE,sCACA,sCACA,yCACA,yCAEDH,EAAOoB,KAAKyC,GACX,+BACE,6BAAKA,EAAM,KACX,6BACE,qBAAKC,IAAKD,EAAM,GAAIxD,MAAOA,MAE7B,6BACE,qBAAKyD,IAAKD,EAAM,GAAIxD,MAAOA,MAE7B,6BACE,qBAAKyD,IAAKD,EAAM,GAAIxD,MAAOA,iBCtH3C,MAAM0D,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAACpE,EAAD,MAEFgE,K","file":"static/js/main.00bb382c.chunk.js","sourcesContent":["const baseStyle = {\n  flex: 1,\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"center\",\n  padding: \"20px\",\n  borderWidth: 2,\n  borderRadius: 2,\n  borderColor: \"#eeeeee\",\n  borderStyle: \"dashed\",\n  backgroundColor: \"#fafafa\",\n  color: \"#bdbdbd\",\n  outline: \"none\",\n  transition: \"border .24s ease-in-out\"\n};\n\nconst activeStyle = {\n  borderColor: \"#2196f3\"\n};\n\nconst acceptStyle = {\n  borderColor: \"#00e676\"\n};\n\nconst rejectStyle = {\n  borderColor: \"#ff1744\"\n};\n\nexport { baseStyle, activeStyle, acceptStyle, rejectStyle };\n","import \"./styles.css\";\nimport { useState, useCallback, useMemo } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { baseStyle, activeStyle, acceptStyle, rejectStyle } from \"./styles\";\n\nexport default function App() {\n  const [images, setImages] = useState([]);\n  const [showImages, setShowImages] = useState(false);\n  const [width, setWidth] = useState(80);\n  const [error, setError] = useState(false);\n\n  const parseData = (toParse) => {\n    const { data } = JSON.parse(toParse);\n    console.log(data);\n    const urls = Object.values(data.brands)\n      .map((entry) => {\n        return [\n          entry?.displayName,\n          entry?.icon?.url,\n          entry?.feature?.url,\n          entry?.logo?.url\n        ];\n      })\n      .reduce((acc, curr) => {\n        return [...acc, [curr[0], curr[1], curr[2], curr[3]]];\n      }, []);\n    setImages(urls);\n  };\n\n  const onDrop = useCallback((acceptedFiles) => {\n    const reader = new FileReader();\n\n    reader.onabort = () => console.log(\"file reading was aborted\");\n    reader.onerror = () => setError(true);\n    reader.onload = () => {\n      // Parse CSV file\n      try {\n        parseData(reader.result);\n      } catch (_e) {\n        setError(true);\n      }\n    };\n\n    // read file contents\n    acceptedFiles.forEach((file) => reader.readAsText(file));\n  }, []);\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragAccept,\n    isDragReject\n  } = useDropzone({ onDrop });\n\n  const style = useMemo(\n    () => ({\n      ...baseStyle,\n      ...(isDragActive ? activeStyle : {}),\n      ...(isDragAccept ? acceptStyle : {}),\n      ...(isDragReject ? rejectStyle : {})\n    }),\n    [isDragActive, isDragReject, isDragAccept]\n  );\n\n  return (\n    <div className=\"App\">\n      {error && (\n        <>\n          <p style={{ color: \"red\" }}>This file doesn't look right.</p>\n          <button onClick={() => setError(false)}>Okay</button>\n          <br />\n        </>\n      )}\n      <h3>Via file import</h3>\n      <div {...getRootProps({ style })}>\n        <input {...getInputProps()} />\n        {isDragActive ? (\n          <p>Drop the file here...</p>\n        ) : (\n          <p>\n            Drag 'n' drop the merchant list file here, or click to select file\n          </p>\n        )}\n      </div>\n      <h3>Paste directly</h3>\n      <textarea\n        rows=\"30\"\n        cols=\"80\"\n        onChange={(ev) => {\n          if (ev.target.value) parseData(ev.target.value);\n        }}\n      ></textarea>\n      <br />\n      <input\n        placeholder=\"image width\"\n        type=\"text\"\n        onChange={(ev) => setWidth(ev.target.value)}\n      />\n      <button\n        onClick={() => {\n          setShowImages(true);\n        }}\n      >\n        Show images\n      </button>\n      {showImages && (\n        <table>\n          <thead>\n            <td>Name</td>\n            <td>Icon</td>\n            <td>Feature</td>\n            <td>Logo</td>\n          </thead>\n          {images.map((image) => (\n            <tr>\n              <td>{image[0]}</td>\n              <td>\n                <img src={image[1]} width={width} />\n              </td>\n              <td>\n                <img src={image[2]} width={width} />\n              </td>\n              <td>\n                <img src={image[3]} width={width} />\n              </td>\n            </tr>\n          ))}\n        </table>\n      )}\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}